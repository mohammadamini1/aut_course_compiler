
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORANDleftNOTnonassocLLEENEGGEleftSUMSUBleftMULDIVMODrightASSIGNAND ASSIGN BEGIN COMMA DEFAULT DIV DO DONE DOUBLEDOT E ELSE END G GE IDENTIFIER IF INTEGER INTEGER_CONSTANT L LCB LE MOD MUL NE NOT OF OR PRINT PROGRAM RCB REAL REAL_CONSTANT SEMICOLON SUB SUM SWITCH THEN VAR WHILEprogram : PROGRAM IDENTIFIER declarations compound_statement\n        declarations : VAR declaration_list\n                        | empty\n        declaration_list : identifier_list DOUBLEDOT type\n                            | declaration_list SEMICOLON identifier_list DOUBLEDOT type\n        identifier_list : IDENTIFIER\n                            | identifier_list COMMA IDENTIFIER\n        type : INTEGER\n                    | REALcompound_statement : BEGIN statement_list ENDstatement_list : statement\n                            | statement_list SEMICOLON statement\n        statement : IDENTIFIER ASSIGN exp\n                        | IF exp THEN statement ELSE statement\n                        | IF exp THEN statement\n                        | WHILE exp DO statement\n                        | compound_statement\n                        | PRINT LCB exp RCB\n                        | SWITCH exp OF cases default_case DONE\n        default_case : DEFAULT statement SEMICOLON\n                        | empty\n        cases : constant_list DOUBLEDOT statement SEMICOLON cases\n                        | empty\n        constant_list : constant\n                        | constant_list COMMA constant\n        constant : REAL_CONSTANT\n                        | INTEGER_CONSTANT\n        \n        exp : INTEGER_CONSTANT\n            | REAL_CONSTANT\n            | IDENTIFIER\n            | exp SUM exp \n            | exp SUB exp\n            | exp MUL exp\n            | exp DIV exp\n            | SUB exp\n            | exp MOD exp\n            | exp L exp\n            | exp E exp\n            | exp G exp\n            | exp NE exp\n            | exp LE exp\n            | exp GE exp\n            | exp AND exp\n            | exp OR exp\n            | NOT exp\n            | LCB exp RCB\n        empty : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,7,23,],[0,-1,-10,]),'IDENTIFIER':([2,5,8,15,16,19,20,22,24,25,30,31,32,34,43,44,45,46,47,48,49,50,51,52,53,54,55,56,60,88,90,92,],[3,11,14,29,29,29,11,40,14,29,29,29,29,29,14,29,29,29,29,29,29,29,29,29,29,29,29,29,14,14,14,14,]),'VAR':([3,],[5,]),'BEGIN':([3,4,6,8,9,24,37,38,39,43,60,87,88,90,92,],[-47,8,-3,8,-2,8,-4,-8,-9,8,8,-5,8,8,8,]),'IF':([8,24,43,60,88,90,92,],[15,15,15,15,15,15,15,]),'WHILE':([8,24,43,60,88,90,92,],[16,16,16,16,16,16,16,]),'PRINT':([8,24,43,60,88,90,92,],[18,18,18,18,18,18,18,]),'SWITCH':([8,24,43,60,88,90,92,],[19,19,19,19,19,19,19,]),'SEMICOLON':([9,12,13,17,23,27,28,29,37,38,39,41,42,57,58,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,94,95,96,97,],[20,24,-11,-17,-10,-28,-29,-30,-4,-8,-9,-12,-13,-35,-45,-15,-31,-32,-33,-34,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,-16,-18,-5,-14,-19,99,100,]),'DOUBLEDOT':([10,11,36,40,82,84,85,86,98,],[21,-6,63,-7,92,-24,-26,-27,-25,]),'COMMA':([10,11,36,40,82,84,85,86,98,],[22,-6,22,-7,93,-24,-26,-27,-25,]),'END':([12,13,17,23,27,28,29,41,42,57,58,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,94,95,],[23,-11,-17,-10,-28,-29,-30,-12,-13,-35,-45,-15,-31,-32,-33,-34,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,-16,-18,-14,-19,]),'ASSIGN':([14,],[25,]),'INTEGER_CONSTANT':([15,16,19,25,30,31,32,34,44,45,46,47,48,49,50,51,52,53,54,55,56,62,93,100,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,86,86,86,]),'REAL_CONSTANT':([15,16,19,25,30,31,32,34,44,45,46,47,48,49,50,51,52,53,54,55,56,62,93,100,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,85,85,85,]),'SUB':([15,16,19,25,26,27,28,29,30,31,32,33,34,35,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[30,30,30,30,45,-28,-29,-30,30,30,30,45,30,45,45,30,30,30,30,30,30,30,30,30,30,30,30,30,-35,45,45,45,-31,-32,-33,-34,-36,45,45,45,45,45,45,45,45,-46,]),'NOT':([15,16,19,25,30,31,32,34,44,45,46,47,48,49,50,51,52,53,54,55,56,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'LCB':([15,16,18,19,25,30,31,32,34,44,45,46,47,48,49,50,51,52,53,54,55,56,],[32,32,34,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'ELSE':([17,23,27,28,29,42,57,58,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,94,95,],[-17,-10,-28,-29,-30,-13,-35,-45,88,-31,-32,-33,-34,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,-16,-18,-14,-19,]),'INTEGER':([21,63,],[38,38,]),'REAL':([21,63,],[39,39,]),'THEN':([26,27,28,29,57,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[43,-28,-29,-30,-35,-45,-31,-32,-33,-34,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,]),'SUM':([26,27,28,29,33,35,42,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[44,-28,-29,-30,44,44,44,-35,44,44,44,-31,-32,-33,-34,-36,44,44,44,44,44,44,44,44,-46,]),'MUL':([26,27,28,29,33,35,42,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[46,-28,-29,-30,46,46,46,46,46,46,46,46,46,-33,-34,-36,46,46,46,46,46,46,46,46,-46,]),'DIV':([26,27,28,29,33,35,42,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[47,-28,-29,-30,47,47,47,47,47,47,47,47,47,-33,-34,-36,47,47,47,47,47,47,47,47,-46,]),'MOD':([26,27,28,29,33,35,42,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[48,-28,-29,-30,48,48,48,48,48,48,48,48,48,-33,-34,-36,48,48,48,48,48,48,48,48,-46,]),'L':([26,27,28,29,33,35,42,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[49,-28,-29,-30,49,49,49,-35,49,49,49,-31,-32,-33,-34,-36,None,None,None,None,None,None,49,49,-46,]),'E':([26,27,28,29,33,35,42,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[50,-28,-29,-30,50,50,50,-35,50,50,50,-31,-32,-33,-34,-36,None,None,None,None,None,None,50,50,-46,]),'G':([26,27,28,29,33,35,42,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[51,-28,-29,-30,51,51,51,-35,51,51,51,-31,-32,-33,-34,-36,None,None,None,None,None,None,51,51,-46,]),'NE':([26,27,28,29,33,35,42,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[52,-28,-29,-30,52,52,52,-35,52,52,52,-31,-32,-33,-34,-36,None,None,None,None,None,None,52,52,-46,]),'LE':([26,27,28,29,33,35,42,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[53,-28,-29,-30,53,53,53,-35,53,53,53,-31,-32,-33,-34,-36,None,None,None,None,None,None,53,53,-46,]),'GE':([26,27,28,29,33,35,42,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[54,-28,-29,-30,54,54,54,-35,54,54,54,-31,-32,-33,-34,-36,None,None,None,None,None,None,54,54,-46,]),'AND':([26,27,28,29,33,35,42,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[55,-28,-29,-30,55,55,55,-35,-45,55,55,-31,-32,-33,-34,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,]),'OR':([26,27,28,29,33,35,42,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[56,-28,-29,-30,56,56,56,-35,-45,56,56,-31,-32,-33,-34,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,]),'DO':([27,28,29,33,57,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[-28,-29,-30,60,-35,-45,-31,-32,-33,-34,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,]),'OF':([27,28,29,35,57,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[-28,-29,-30,62,-35,-45,-31,-32,-33,-34,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,]),'RCB':([27,28,29,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[-28,-29,-30,-35,-45,78,80,-31,-32,-33,-34,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,]),'DEFAULT':([62,81,83,100,101,],[-47,90,-23,-47,-22,]),'DONE':([62,81,83,89,91,99,100,101,],[-47,-47,-23,95,-21,-20,-47,-22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([3,],[4,]),'empty':([3,62,81,100,],[6,83,91,83,]),'compound_statement':([4,8,24,43,60,88,90,92,],[7,17,17,17,17,17,17,17,]),'declaration_list':([5,],[9,]),'identifier_list':([5,20,],[10,36,]),'statement_list':([8,],[12,]),'statement':([8,24,43,60,88,90,92,],[13,41,64,79,94,96,97,]),'exp':([15,16,19,25,30,31,32,34,44,45,46,47,48,49,50,51,52,53,54,55,56,],[26,33,35,42,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,]),'type':([21,63,],[37,87,]),'cases':([62,100,],[81,101,]),'constant_list':([62,100,],[82,82,]),'constant':([62,93,100,],[84,98,84,]),'default_case':([81,],[89,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER declarations compound_statement','program',4,'p_program','parser.py',13),
  ('declarations -> VAR declaration_list','declarations',2,'p_declarations','parser.py',18),
  ('declarations -> empty','declarations',1,'p_declarations','parser.py',19),
  ('declaration_list -> identifier_list DOUBLEDOT type','declaration_list',3,'p_declaration_list','parser.py',24),
  ('declaration_list -> declaration_list SEMICOLON identifier_list DOUBLEDOT type','declaration_list',5,'p_declaration_list','parser.py',25),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','parser.py',30),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','parser.py',31),
  ('type -> INTEGER','type',1,'p_type','parser.py',36),
  ('type -> REAL','type',1,'p_type','parser.py',37),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','parser.py',41),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',45),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','parser.py',46),
  ('statement -> IDENTIFIER ASSIGN exp','statement',3,'p_statement','parser.py',51),
  ('statement -> IF exp THEN statement ELSE statement','statement',6,'p_statement','parser.py',52),
  ('statement -> IF exp THEN statement','statement',4,'p_statement','parser.py',53),
  ('statement -> WHILE exp DO statement','statement',4,'p_statement','parser.py',54),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',55),
  ('statement -> PRINT LCB exp RCB','statement',4,'p_statement','parser.py',56),
  ('statement -> SWITCH exp OF cases default_case DONE','statement',6,'p_statement','parser.py',57),
  ('default_case -> DEFAULT statement SEMICOLON','default_case',3,'p_default_case','parser.py',62),
  ('default_case -> empty','default_case',1,'p_default_case','parser.py',63),
  ('cases -> constant_list DOUBLEDOT statement SEMICOLON cases','cases',5,'p_cases','parser.py',68),
  ('cases -> empty','cases',1,'p_cases','parser.py',69),
  ('constant_list -> constant','constant_list',1,'p_constant_list','parser.py',74),
  ('constant_list -> constant_list COMMA constant','constant_list',3,'p_constant_list','parser.py',75),
  ('constant -> REAL_CONSTANT','constant',1,'p_constant','parser.py',80),
  ('constant -> INTEGER_CONSTANT','constant',1,'p_constant','parser.py',81),
  ('exp -> INTEGER_CONSTANT','exp',1,'p_exp','parser.py',87),
  ('exp -> REAL_CONSTANT','exp',1,'p_exp','parser.py',88),
  ('exp -> IDENTIFIER','exp',1,'p_exp','parser.py',89),
  ('exp -> exp SUM exp','exp',3,'p_exp','parser.py',90),
  ('exp -> exp SUB exp','exp',3,'p_exp','parser.py',91),
  ('exp -> exp MUL exp','exp',3,'p_exp','parser.py',92),
  ('exp -> exp DIV exp','exp',3,'p_exp','parser.py',93),
  ('exp -> SUB exp','exp',2,'p_exp','parser.py',94),
  ('exp -> exp MOD exp','exp',3,'p_exp','parser.py',95),
  ('exp -> exp L exp','exp',3,'p_exp','parser.py',96),
  ('exp -> exp E exp','exp',3,'p_exp','parser.py',97),
  ('exp -> exp G exp','exp',3,'p_exp','parser.py',98),
  ('exp -> exp NE exp','exp',3,'p_exp','parser.py',99),
  ('exp -> exp LE exp','exp',3,'p_exp','parser.py',100),
  ('exp -> exp GE exp','exp',3,'p_exp','parser.py',101),
  ('exp -> exp AND exp','exp',3,'p_exp','parser.py',102),
  ('exp -> exp OR exp','exp',3,'p_exp','parser.py',103),
  ('exp -> NOT exp','exp',2,'p_exp','parser.py',104),
  ('exp -> LCB exp RCB','exp',3,'p_exp','parser.py',105),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',110),
]
